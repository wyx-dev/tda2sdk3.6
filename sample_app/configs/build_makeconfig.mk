include $($(MAKEAPPNAME)_PATH)/configs/autorules_header_cfg.mk
include $($(MAKEAPPNAME)_PATH)/configs/defaults.mk
include $(vision_sdk_PATH)/build/Rules.make
include $($(MAKEAPPNAME)_PATH)/configs/cfg.mk
include $($(MAKEAPPNAME)_PATH)/configs/autorules_footer_cfg.mk

OUTFILE=$(vision_sdk_PATH)/links_fw/include/config/$(MAKEAPPNAME)/$(MAKECONFIG)/system_cfg.h
INFILE=$(vision_sdk_PATH)/sample_app/configs/$(MAKECONFIG)/cfg.mk

# putting option -j1 since with windows command prompt seeing issues otherwise
MK_OPTS=-s -j1

OUTLINE=$(ECHO) $(1) >> $(OUTFILE)

dummy:

all:
	-$(MKDIR) $(vision_sdk_PATH)/links_fw/include/config
	-$(MKDIR) $(vision_sdk_PATH)/links_fw/include/config/$(MAKEAPPNAME)
	-$(MKDIR) $(vision_sdk_PATH)/links_fw/include/config/$(MAKEAPPNAME)/$(MAKECONFIG)
	$(ECHO) '# makeconfig: Config is [ $(MAKECONFIG) ]'
	$(ECHO) '# makeconfig: Output file is @ $(OUTFILE)'
	$(ECHO) '# makeconfig: Input  file is @ $(INFILE)'
	$(ECHO) '# makeconfig: Generating header ...'
	$(MAKE) -fbuild_makeconfig.mk header $(MK_OPTS)
	$(ECHO) '# makeconfig: Generating alg plugin config ...'
	$(MAKE) -fbuild_makeconfig.mk alg_config $(MK_OPTS)
	$(ECHO) '# makeconfig: Generating usecase config ...'
	$(MAKE) -fbuild_makeconfig.mk uc_config $(MK_OPTS)
	$(ECHO) '# makeconfig: Generating footer ...'
	$(MAKE) -fbuild_makeconfig.mk footer $(MK_OPTS)
	$(ECHO) '# makeconfig: Done !!!'
	$(MAKE) -s -fbuild_makeconfig.mk check_cpu_include

$(ALG_LIST) $(RADAR_ALG_LIST) $(ISS_ALG_LIST) $(ALL_UC_LIST) $(RADAR_ALG_FXN_LIST):
	$(if $(call CHECK_YES,$($@)), $(call OUTLINE, '#define $@'), $(if $(subst emptyreplacement,,$($@)), $(call OUTLINE, '#define $@_$($@)'),))


alg_config:
	$(call OUTLINE,'')
	$(call OUTLINE,' /* Alg-plugin links and functions included in build */')
	$(call OUTLINE,'')
	$(MAKE) -fbuild_makeconfig.mk $(MK_OPTS) $(ALG_LIST) $(RADAR_ALG_LIST) $(ISS_ALG_LIST) $(RADAR_ALG_FXN_LIST)

uc_config:
	$(call OUTLINE,'')
	$(call OUTLINE,' /* Use-cases included in build */')
	$(call OUTLINE,'')
	$(MAKE) -fbuild_makeconfig.mk $(MK_OPTS) $(ALL_UC_LIST)

header:

	-$(RM) -f $(OUTFILE)
	$(call OUTLINE,' /*'                                                                            )
	$(call OUTLINE,' ******************************************************************************')
	$(call OUTLINE,' *'                                                                             )
	$(call OUTLINE,' * IMPORTANT NOTE:'                                                             )
	$(call OUTLINE,' *  This file is AUTO-GENERATED by Vision SDK build system by doing'            )
	$(call OUTLINE,' *      gmake -s makeconfig'                                                    )
	$(call OUTLINE,' *'                                                                             )
	$(call OUTLINE,' ******************************************************************************')
	$(call OUTLINE,' */'                                                                            )
	$(call OUTLINE,'')
	$(call OUTLINE,' /*'                                                                            )
	$(call OUTLINE,' * Config name is [ $(MAKECONFIG) ]'                                            )
	$(call OUTLINE,' */'                                                                            )
	$(call OUTLINE,'')
	$(call OUTLINE,'#ifndef SYSTEM_CFG_H')
	$(call OUTLINE,'#define SYSTEM_CFG_H')
	$(call OUTLINE,'')
	$(call OUTLINE,'')

footer:
	$(call OUTLINE,'')
	$(call OUTLINE,'#endif /* $(BOARD_TYPE)_CFG_H */')

##########################################
#                                        #
# Vision-SDK Print Build Config          #
#                                        #
##########################################

showconfig:
	$(ECHO) \#
	$(ECHO) \# Build Config is [ $(MAKECONFIG) ]
	$(ECHO) \# Build Config file is @ $(vision_sdk_PATH)/configs/$(MAKECONFIG)/cfg.mk
	$(ECHO) \# Build Config .h file is @ $(OUTFILE)
	$(ECHO) \# Build CPUs is @ $(BUILD_CPUS)
	$(ECHO) \#
	$(ECHO) \# CPUs included in application,
	$(ECHO) \# PROC_IPU1_0_INCLUDE=$(PROC_IPU1_0_INCLUDE)
	$(ECHO) \# PROC_IPU1_1_INCLUDE=$(PROC_IPU1_1_INCLUDE)
	$(ECHO) \# PROC_IPU2_INCLUDE=$(PROC_IPU2_INCLUDE)
	$(ECHO) \# PROC_DSP1_INCLUDE=$(PROC_DSP1_INCLUDE)
	$(ECHO) \# PROC_DSP2_INCLUDE=$(PROC_DSP2_INCLUDE)
	$(ECHO) \# PROC_EVE1_INCLUDE=$(PROC_EVE1_INCLUDE)
	$(ECHO) \# PROC_EVE2_INCLUDE=$(PROC_EVE2_INCLUDE)
	$(ECHO) \# PROC_EVE3_INCLUDE=$(PROC_EVE3_INCLUDE)
	$(ECHO) \# PROC_EVE4_INCLUDE=$(PROC_EVE4_INCLUDE)
	$(ECHO) \# PROC_A15_0_INCLUDE=$(PROC_A15_0_INCLUDE)
	$(ECHO) \#
	$(ECHO) \# Platform config,
	$(ECHO) \# VSDK_BOARD_TYPE=$(VSDK_BOARD_TYPE) [options: TDA2XX_EVM TDA2EX_EVM TDA3XX_EVM TDA3XX_RVP TDA2XX_RVP]
	$(ECHO) \# PLATFORM=$(PLATFORM)
	$(ECHO) \# DUAL_A15_SMP_BIOS=$(DUAL_A15_SMP_BIOS)
	$(ECHO) \# IPU1_SMP_BIOS=$(IPU1_SMP_BIOS)
	$(ECHO) \# DDR_MEM=$(DDR_MEM) [options: DDR_MEM_128M DDR_MEM_512M DDR_MEM_1024M]
	$(ECHO) \# EMIFMODE=$(EMIFMODE) [options: SINGLE_EMIF_512MB SINGLE_EMIF_1GB ref build_pdk.mk]
	$(ECHO) \# NDK_PROC_TO_USE=$(NDK_PROC_TO_USE) [options: a15_0 ipu1_0 ipu1_1 ipu2 none]
	$(ECHO) \# NSP_TFDTP_INCLUDE=$(NSP_TFDTP_INCLUDE) [options: yes no]
	$(ECHO) \# TDA2EX_ETHSRV_BOARD=$(TDA2EX_ETHSRV_BOARD) [options: yes no]
	$(ECHO) \# FATFS_PROC_TO_USE=$(FATFS_PROC_TO_USE) [options: ipu1_0 none]
	$(ECHO) \# RADAR_BOARD=$(RADAR_BOARD) [options: TDA3XX_AR12_ALPS TDA3XX_AR12_VIB_DAB_BOOSTER TDA3XX_RADAR_RVP none]
	$(ECHO) \#
	$(ECHO) \# Build config,
	$(ECHO) \# BUILD_OS=$(BUILD_OS) [options: Windows_NT Linux]
	$(ECHO) \# BUILD_DEPENDENCY_ALWAYS=$(BUILD_DEPENDENCY_ALWAYS)
	$(ECHO) \# BUILD_ALGORITHMS=$(BUILD_ALGORITHMS)
	$(ECHO) \# BUILD_INFOADAS=$(BUILD_INFOADAS)
	$(ECHO) \# PROFILE=$(PROFILE) [options: debug release]
	$(ECHO) \# KW_BUILD=$(KW_BUILD)
	$(ECHO) \# CPLUSPLUS_BUILD=$(CPLUSPLUS_BUILD)
	$(ECHO) \# IPU_PRIMARY_CORE=$(IPU_PRIMARY_CORE) [options: ipu1_0 ipu2]
	$(ECHO) \# IPU_SECONDARY_CORE=$(IPU_SECONDARY_CORE) [options: ipu1_0 ipu2]
	$(ECHO) \# A15_TARGET_OS=$(A15_TARGET_OS) [options: Bios Linux Qnx]
	$(ECHO) \# BSP_STW_PACKAGE_SELECT=$(BSP_STW_PACKAGE_SELECT) [options: all vps-iss-dss-only vps-vip-vpe]
	$(ECHO) \#
	$(ECHO) \# Safety Module config,
	$(ECHO) \# RTI_INCLUDE=$(RTI_INCLUDE)
	$(ECHO) \# ECC_FFI_INCLUDE=$(ECC_FFI_INCLUDE)
	$(ECHO) \# DCC_ESM_INCLUDE=$(DCC_ESM_INCLUDE)
	$(ECHO) \#
	$(ECHO) \# Video Module config,
	$(ECHO) \# IVAHD_INCLUDE=$(IVAHD_INCLUDE)
	$(ECHO) \# VPE_INCLUDE=$(VPE_INCLUDE)
	$(ECHO) \# CAL_INCLUDE=$(CAL_INCLUDE)
	$(ECHO) \# ISS_INCLUDE=$(ISS_INCLUDE)
	$(ECHO) \# ISS_ENABLE_DEBUG_TAPS=$(ISS_ENABLE_DEBUG_TAPS)
	$(ECHO) \# WDR_LDC_INCLUDE=$(WDR_LDC_INCLUDE)
	$(ECHO) \# DSS_INCLUDE=$(DSS_INCLUDE)
	$(ECHO) \#
	$(ECHO) \# Open Compute config,
	$(ECHO) \# OPENCL_INCLUDE=$(OPENCL_INCLUDE)
	$(ECHO) \# TARGET_ROOTDIR=$(TARGET_ROOTDIR)
	$(ECHO) \# ENABLE_OPENCV=$(ENABLE_OPENCV)
	$(ECHO) \# ENABLE_OPENCV_TESTS=$(ENABLE_OPENCV_TESTS)
	$(ECHO) \# OPENVX_INCLUDE=$(OPENVX_INCLUDE)
	$(ECHO) \#
	$(ECHO) \# Log config,
	$(ECHO) \# ENABLE_UART_LOG=$(ENABLE_UART_LOG)
	$(ECHO) \# ENABLE_NETWORK_LOG=$(ENABLE_NETWORK_LOG)
	$(ECHO) \# ENABLE_CCS_LOG=$(ENABLE_CCS_LOG)
	$(ECHO) \# CIO_REDIRECT=$(CIO_REDIRECT)
	$(ECHO) \#
	$(ECHO) \# IPC config,
	$(ECHO) \# WORKQ_INCLUDE=$(WORKQ_INCLUDE)
	$(ECHO) \# IPC_LIB_INCLUDE=$(IPC_LIB_INCLUDE)
	$(ECHO) \#
	$(ECHO) \# AUTOSAR_APP=$(AUTOSAR_APP)
	$(ECHO) \#
	$(ECHO) \# Surround View config,
	$(ECHO) \# SRV_FAST_BOOT_INCLUDE=$(SRV_FAST_BOOT_INCLUDE)
	$(ECHO) \#
	$(ECHO) \# Other Module config,
	$(ECHO) \# AVB_INCLUDE=$(AVB_INCLUDE)
	$(ECHO) \# DCAN_INCLUDE=$(DCAN_INCLUDE)
	$(ECHO) \# RADAR_ONLY=$(RADAR_ONLY)
	$(ECHO) \# CPU_IDLE_ENABLED=$(CPU_IDLE_ENABLED)
	$(ECHO) \# FAST_BOOT_INCLUDE=$(FAST_BOOT_INCLUDE)
	$(ECHO) \# DATA_VIS_INCLUDE=$(DATA_VIS_INCLUDE)
	$(ECHO) \# HS_DEVICE=$(HS_DEVICE)
	$(ECHO) \# ULTRASONIC_INCLUDE=$(ULTRASONIC_INCLUDE)
	$(ECHO) \# PGA450=$(PGA450)
	$(ECHO) \# PGA460=$(PGA460)
	$(ECHO) \# ENABLE_ALL_DEPTH=$(ENABLE_ALL_DEPTH)
	$(ECHO) \#
	$(ECHO) \# Linux config,
	$(ECHO) \# DEFAULT_UBOOT_CONFIG=$(DEFAULT_UBOOT_CONFIG)
	$(ECHO) \# DEFAULT_KERNEL_CONFIG=$(DEFAULT_KERNEL_CONFIG)
	$(ECHO) \# DEFAULT_DTB=$(DEFAULT_DTB)
	$(ECHO) \# CMEM_INCLUDE=$(CMEM_INCLUDE)
	$(ECHO) \# IPUMM_INCLUDE=$(IPUMM_INCLUDE)
	$(ECHO) \# IPU1_EVELOADER_INCLUDE=$(IPU1_EVELOADER_INCLUDE)
	$(ECHO) \# ROBUST_RVC_INCLUDE=$(ROBUST_RVC_INCLUDE)
	$(ECHO) \# BUILD_ADAM_CAR=$(BUILD_ADAM_CAR)
	$(ECHO) \#
	$(ECHO) \# Alg plugins included in build,
	$(ECHO) \# $(foreach alg, $(ALG_LIST) $(RADAR_ALG_LIST) $(ISS_ALG_LIST), $(if $(call CHECK_YES,$($(alg))),$(alg)))
	$(ECHO) \#
	$(ECHO) \# Use-cases included in build,
	$(ECHO) \# $(foreach uc,$(ALL_UC_LIST), $(if $(call CHECK_YES,$($(uc))),$(uc)))
	$(ECHO) \#
	$(MAKE) -s -fbuild_makeconfig.mk check_cpu_include

check_cpu_include:
	$(ECHO) \#
	$(ECHO) \# CPUs that are NOT required but included in config [ $(MAKECONFIG) ],
	$(ECHO) \#
ifneq ($(NEED_PROC_IPU1_0),yes)
ifeq ($(PROC_IPU1_0_INCLUDE),yes)
	$(ECHO) \# WARNING: IPU1_0 can be excluded from application
endif
endif
ifneq ($(NEED_PROC_IPU1_1),yes)
ifeq ($(PROC_IPU1_1_INCLUDE),yes)
	$(ECHO) \# WARNING: IPU1_1 can be excluded from application
endif
endif
ifneq ($(NEED_PROC_IPU2),yes)
ifeq ($(PROC_IPU2_INCLUDE),yes)
	$(ECHO) \# WARNING: IPU2 can be excluded from application
endif
endif
ifneq ($(NEED_PROC_DSP1),yes)
ifeq ($(PROC_DSP1_INCLUDE),yes)
	$(ECHO) \# WARNING: DSP1 can be excluded from application
endif
endif
ifneq ($(NEED_PROC_DSP2),yes)
ifeq ($(PROC_DSP2_INCLUDE),yes)
	$(ECHO) \# WARNING: DSP2 can be excluded from application
endif
endif
ifneq ($(NEED_PROC_EVE1),yes)
ifeq ($(PROC_EVE1_INCLUDE),yes)
	$(ECHO) \# WARNING: EVE1 can be excluded from application
endif
endif
ifneq ($(NEED_PROC_EVE2),yes)
ifeq ($(PROC_EVE2_INCLUDE),yes)
	$(ECHO) \# WARNING: EVE2 can be excluded from application
endif
endif
ifneq ($(NEED_PROC_EVE3),yes)
ifeq ($(PROC_EVE3_INCLUDE),yes)
	$(ECHO) \# WARNING: EVE3 can be excluded from application
endif
endif
ifneq ($(NEED_PROC_EVE4),yes)
ifeq ($(PROC_EVE4_INCLUDE),yes)
	$(ECHO) \# WARNING: EVE4 can be excluded from application
endif
endif
ifneq ($(NEED_PROC_A15_0),yes)
ifeq ($(PROC_A15_0_INCLUDE),yes)
	$(ECHO) \# WARNING: A15_0 can be excluded from application
endif
endif
	$(ECHO) \#
	$(ECHO) \# CPUs that are required but not included in config [ $(MAKECONFIG) ],
	$(ECHO) \#
ifeq ($(NEED_PROC_IPU1_0),yes)
ifneq ($(PROC_IPU1_0_INCLUDE),yes)
	$(ECHO) \# ERROR: IPU1_0 MUST be included in application
endif
endif
ifeq ($(NEED_PROC_IPU1_1),yes)
ifneq ($(PROC_IPU1_1_INCLUDE),yes)
	$(ECHO) \# ERROR: IPU1_1 MUST be included in application
endif
endif
ifeq ($(NEED_PROC_IPU2),yes)
ifneq ($(PROC_IPU2_INCLUDE),yes)
	$(ECHO) \# ERROR: IPU2 MUST be included in application
endif
endif
ifeq ($(NEED_PROC_DSP1),yes)
ifneq ($(PROC_DSP1_INCLUDE),yes)
	$(ECHO) \# ERROR: DSP1 MUST be included in application
endif
endif
ifeq ($(NEED_PROC_DSP2),yes)
ifneq ($(PROC_DSP2_INCLUDE),yes)
	$(ECHO) \# ERROR: DSP2 MUST be included in application
endif
endif
ifeq ($(NEED_PROC_EVE1),yes)
ifneq ($(PROC_EVE1_INCLUDE),yes)
	$(ECHO) \# ERROR: EVE1 MUST be included in application
endif
endif
ifeq ($(NEED_PROC_EVE2),yes)
ifneq ($(PROC_EVE2_INCLUDE),yes)
	$(ECHO) \# ERROR: EVE2 MUST be included in application
endif
endif
ifeq ($(NEED_PROC_EVE3),yes)
ifneq ($(PROC_EVE3_INCLUDE),yes)
	$(ECHO) \# ERROR: EVE3 MUST be included in application
endif
endif
ifeq ($(NEED_PROC_EVE4),yes)
ifneq ($(PROC_EVE4_INCLUDE),yes)
	$(ECHO) \# ERROR: EVE4 MUST be included in application
endif
endif
ifeq ($(NEED_PROC_A15_0),yes)
ifneq ($(PROC_A15_0_INCLUDE),yes)
	$(ECHO) \# ERROR: A15_0 MUST be included in application
endif
endif
	$(ECHO) \#
	$(ECHO) \# Edit $(INFILE) to include or exclude CPUs in an application
	$(ECHO) \#

