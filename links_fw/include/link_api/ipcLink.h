/*
Copyright (c) [2012 - 2017] Texas Instruments Incorporated

All rights reserved not granted herein.

Limited License.

 Texas Instruments Incorporated grants a world-wide, royalty-free, non-exclusive
 license under copyrights and patents it now or hereafter owns or controls to
 make,  have made, use, import, offer to sell and sell ("Utilize") this software
 subject to the terms herein.  With respect to the foregoing patent license,
 such license is granted  solely to the extent that any such patent is necessary
 to Utilize the software alone.  The patent license shall not apply to any
 combinations which include this software, other than combinations with devices
 manufactured by or for TI ("TI Devices").  No hardware patent is licensed
 hereunder.

 Redistributions must preserve existing copyright notices and reproduce this
 license (including the above copyright notice and the disclaimer and
 (if applicable) source code license limitations below) in the documentation
 and/or other materials provided with the distribution

 Redistribution and use in binary form, without modification, are permitted
 provided that the following conditions are met:

 * No reverse engineering, decompilation, or disassembly of this software
   is permitted with respect to any software provided in binary form.

 * Any redistribution and use are licensed by TI for use only with TI Devices.

 * Nothing shall obligate TI to provide you with source code for the software
   licensed and provided to you in object code.

 If software source code is provided to you, modification and redistribution of
 the source code are permitted provided that the following conditions are met:

 * Any redistribution and use of the source code, including any resulting
   derivative works, are licensed by TI for use only with TI Devices.

 * Any redistribution and use of any object code compiled from the source code
   and any resulting derivative works, are licensed by TI for use only with TI
   Devices.

 Neither the name of Texas Instruments Incorporated nor the names of its
 suppliers may be used to endorse or promote products derived from this software
 without specific prior written permission.

 DISCLAIMER.

 THIS SOFTWARE IS PROVIDED BY TI AND TI’S LICENSORS "AS IS" AND ANY EXPRESS OR
 IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 IN NO EVENT SHALL TI AND TI’S LICENSORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

/**
 *******************************************************************************
 *
 * \ingroup FRAMEWORK_MODULE_API
 * \defgroup IPC_LINK_API IPC Link API
 *
 * \brief  This module has the interface for using IPC OUT and IPC IN Link
 *
 *         IPC OUT and IPC IN Link is used when buffer generated by
 *         one link needs to go to another link which is running on a
 *         different processor. IPC OUT and IPC IN links always operate
 *         as a pair.
 *
 *         IPC OUT Link is used to receive buffer information from
 *         previous link on the same processor and after appropriate
 *         information translation send the buffer information to IPC
 *         IN link which resides on another processor.
 *
 *         IPC IN Link is used to receive buffer information from IPC
 *         OUT Link on another processor and after appropriate
 *         translation send the frame information to next
 *         link on same processor.
 *
 *         Internally these links using Notify and Shared Region that
 *         is available as part of IPC 3.0 package for inter
 *         processor communication. The processing link itself need not worry
 *         of the lower level details related to inter processor communication.
 *
 *         Ex, when Capture needs to send video buffers to DSP  for
 *         some processing, the chain is constructed as below
 *
 *          Capture Link (M4) -> IPC OUT (M4) -> IPC IN (DSP) ->
 *          DSP ALG (DSP) ...
 *
 *         IPC Links take care of things like
 *         - Shared memory allocation between two processors
 *         - Interrupts to notify each processors
 *         - Information translation including buffer pointer
 *           translation across   processors incase each processor
 *           uses a different address space
 *
 *         IPC Links do NOT take care of the below
 *         - Cache operations on the contents of the buffer
 *           - Every processing link writing data to a buffer via CPU
 *             is supposed to flush the contents of the buffer out of
 *             cache before passing the buffer pointer
 *             to the next link
 *           - Every processing link reading data from a buffer via
 *             CPU is supposed to invalidate the contents of the
 *             buffer before using
 *           - When buffer data is generated / read by HWA or EDMA
 *             then the processing link need not do flush /
 *             invalidate operations on the buffer
 *           - Since such information is not available to IPC link,
 *             IPC link will not touch the data pointed to by a
 *             buffer and neither will it do any cache operation on
 *             the data pointed to by a buffer
 *
 *         IPC Link is multi-instance, i.e there can be multiple IPC
 *         In and/or IPC OUT links running on the same processor.
 *
 *         IPC OUT Link determines if the next link is on processor
 *         in a uni-cache system, ex, IPU1-Core0 and IPU1-Core1. In
 *         this case, it can exchange the buffer information directly
 *         via pointer passing instead of using any shared memory and
 *         address translations.
 *
 *         Similarly IPC In link is able to receive the pointer sent
 *         by a IPC OUT link in a uni-cache system
 *
 *         IPC OUT and IPC IN link also support operation in a
 *         non-notify polling mode. In this mode, they do not use
 *         interrupt to notify each other about new full and/or empty
 *         buffer availability. Instead each link periodically polls
 *         to find if any new data is available. The periodicity of
 *         polling is configurable at create time.
 *
 *         IPC OUT link support's frame-rate control and support
 *         dropping of buffers based on user supplied control
 *         command.
 *
 * @{
 *
 *******************************************************************************
 */

/**
 *******************************************************************************
 *
 * \file ipcLink.h
 *
 * \brief IPC Link API
 *
 * \version 0.0 (Jul 2013) : [KC] First version
 *
 *******************************************************************************
 */

#ifndef IPC_LINK_H_
#define IPC_LINK_H_

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *  INCLUDE FILES
 *******************************************************************************
 */
#include <include/link_api/system.h>

/*******************************************************************************
 *  Defines
 *******************************************************************************
 */

/**
 *******************************************************************************
 *
 *   \ingroup LINK_API_CMD
 *   \addtogroup IPC_LINK_API_CMD IPC Link Control Commands
 *
 *   @{
 *
 *******************************************************************************
 */

/**
 *******************************************************************************
 *
 *   \brief Link CMD: Set frame-rate for IPC OUT Link channel
 *
 *          ONLY valid for IPC OUT Link
 *          NOT  applicable for IPC IN  Link
 *
 *   \param IpcLink_FrameRateParams [IN]    Set frame-rate for a given
 *                                          channel
 *
 *   \return SYSTEM_STATUS_SOK on success
 *
 *******************************************************************************
 */
#define IPC_OUT_LINK_CMD_SET_FRAME_RATE          (0x5002U)

/* @} */

/*******************************************************************************
 *  Enum's
 *******************************************************************************
 */


/*******************************************************************************
 *  Data structures
 *******************************************************************************
 */

/**
 *******************************************************************************
 *
 * \brief Set frame-rate for a given channel in IPC OUT Link
 *
 *******************************************************************************
 */
typedef struct {

    UInt32 chNum;
    /**< Channel for which frame-rate control is done */

    UInt32 inputFrameRate;
    /**< Expected input frame-rate */

    UInt32 outputFrameRate;
    /**< Required output frame-rate */

} IpcLink_FrameRateParams;

/**
 *******************************************************************************
 *
 * \brief IPC Link create parameters
 *
 *******************************************************************************
 */
typedef struct {

    System_LinkInQueParams   inQueParams;
    /**< Input queue information
     */

    System_LinkOutQueParams  outQueParams;
    /**< Output queue information
     */

} IpcLink_CreateParams;

/*******************************************************************************
 *  Functions
 *******************************************************************************
 */

/**
 *******************************************************************************
 *
 *   \brief IPC link register and init function
 *
 *          For each IPC instance
 *          - Creates link task
 *          - Registers as a link with the system API
 *
 *   \return  SYSTEM_LINK_STATUS_SOK on success
 *
 *******************************************************************************
*/
Int32 IpcOutLink_init(void);

/**
 *******************************************************************************
 *
 *   \brief IPC link de-register and de-init function
 *
 *          For each IPC instance
 *          - Deletes link task
 *          - De-registers as a link with the system API
 *
 *   \return  SYSTEM_LINK_STATUS_SOK on success
 *
 *******************************************************************************
*/
Int32 IpcOutLink_deInit(void);

/**
 *******************************************************************************
 *
 *   \brief IPC In link register and init function
 *
 *          For each IPC instance
 *          - Creates link task
 *          - Registers as a link with the system API
 *
 *   \return  SYSTEM_LINK_STATUS_SOK on success
 *
 *******************************************************************************
*/
Int32 IpcInLink_init(void);

/**
 *******************************************************************************
 *
 *   \brief IPC In link de-register and de-init function
 *
 *          For each IPC instance
 *          - Deletes link task
 *          - De-registers as a link with the system API
 *
 *   \return  SYSTEM_LINK_STATUS_SOK on success
 *
 *******************************************************************************
*/
Int32 IpcInLink_deInit(void);

/**
 *******************************************************************************
 *
 *   \brief Function to initialize the IPC Link Create Params
 *
 *          Sets default values for IPC link create time parameters
 *          User/App can override these default values later.
 *
 *   \param prm [IN] IPC Link create parameters
 *
 *   \return void
 *
 *******************************************************************************
*/
static inline Void IpcLink_CreateParams_Init(IpcLink_CreateParams *prm);
static inline Void IpcLink_CreateParams_Init(IpcLink_CreateParams *prm)
{
/* MISRA.ONEDEFRULE.FUNC
 * MISRAC_2004 Rule 8.5
 * Function Definition in header file
 * KW State: Defer -> Waiver -> Case by case
 * MISRAC_WAIVER: This function initializes the create time argument to default.
 *  Defining this in the header file aids maintainability.
 */
    memset(prm, 0, sizeof(IpcLink_CreateParams));

    prm->inQueParams.prevLinkId = SYSTEM_LINK_ID_INVALID;
    prm->outQueParams.nextLink  = SYSTEM_LINK_ID_INVALID;
}

#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif

/* @} */

/* Nothing beyond this point */
