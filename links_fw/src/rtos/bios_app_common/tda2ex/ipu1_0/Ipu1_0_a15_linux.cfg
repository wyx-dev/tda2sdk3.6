
/*******************************************************************************
*  Set IPU1 core0 specific configuration when linux is running on A15
*******************************************************************************/


var IpummInclude    = java.lang.System.getenv("IPUMM_INCLUDE");

/*
 *  This NDK_MEM needs to be mapped one to one in L2MMU of IPU
 *  throuh resource table.
 */
var Program         = xdc.useModule('xdc.cfg.Program');

xdc.loadCapsule("src/rtos/bios_app_common/tda2ex/cfg/IPC_RpMsgDrv.cfg");

/*  Configure external timer base address to match resource table mapping.
 */
var dmTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
/* dmTimer 0 mapped to GPT1 */
dmTimer.timerSettings[0].baseAddr = 0x6AE18000;
/* dmTimer 1 mapped to GPT2 */
dmTimer.timerSettings[1].baseAddr = 0x68032000;
/* dmTimer 2 mapped to GPT3 */
dmTimer.timerSettings[2].baseAddr = 0x68034000;
/* dmTimer 3 mapped to GPT4 */
dmTimer.timerSettings[3].baseAddr = 0x68036000;
/* dmTimer 4 mapped to GPT5 */
dmTimer.timerSettings[4].baseAddr = 0x68820000;
/* dmTimer 5 mapped to GPT6 */
dmTimer.timerSettings[5].baseAddr = 0x68822000;
/* dmTimer 6 mapped to GPT7 */
dmTimer.timerSettings[6].baseAddr = 0x68824000;
/* dmTimer 7 mapped to GPT8 */
dmTimer.timerSettings[7].baseAddr = 0x68826000;
/* dmTimer 8 mapped to GPT9 */
dmTimer.timerSettings[8].baseAddr = 0x6803E000;
/* dmTimer 9 mapped to GPT10 */
dmTimer.timerSettings[9].baseAddr = 0x68086000;
/* dmTimer 10 mapped to GPT11 */
dmTimer.timerSettings[10].baseAddr = 0x68088000;
/* dmTimer 11 mapped to GPT12 */
dmTimer.timerSettings[11].baseAddr = 0x6AE20000;
/* dmTimer 12 mapped to GPT13 */
dmTimer.timerSettings[12].baseAddr = 0x68828000;
/* dmTimer 13 mapped to GPT14 */
dmTimer.timerSettings[13].baseAddr = 0x6882A000;
/* dmTimer 14 mapped to GPT15 */
dmTimer.timerSettings[14].baseAddr = 0x6882C000;
/* dmTimer 15 mapped to GPT16 */
dmTimer.timerSettings[15].baseAddr = 0x6882E000;

/* use external timers because they keep running when IPU is not */
var halTimer = xdc.useModule('ti.sysbios.hal.Timer');
halTimer.TimerProxy = dmTimer;

/***********************************************
 *          Reset Module Configuration         *
 ***********************************************/
var Reset = xdc.useModule('xdc.runtime.Reset');
Reset.fxns[Reset.fxns.length++] = "&Utils_prcmTimerInitForIpu";

/***********************************************
 *          CLOCK Module Configuration         *
 ***********************************************/
var Clock = xdc.useModule("ti.sysbios.knl.Clock");
Clock.tickMode = Clock.TickMode_PERIODIC;
Clock.tickSource = Clock.TickSource_USER;

/***********************************************
 *           Timer Module Configuration        *
 ***********************************************/
var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
/* allocate timer 3 and 11 to IPU1 */
var TimerSupport = xdc.useModule('ti.sysbios.family.shared.vayu.TimerSupport');
TimerSupport.availMask = 0x0404;

var timerParams = new Timer.Params();
timerParams.period = 1000;
timerParams.twer.ovf_wup_ena = 1;
timerParams.tiocpCfg.emufree = 1;
timerParams.tiocpCfg.idlemode = 1;
timerParams.tsicr.posted = 0;
Timer.intFreqs[2].hi = 0;
Timer.intFreqs[2].lo = 20000000;
Timer.checkFrequency = false;
Timer.create(2, '&mainIPU1_C0TimerTick', timerParams);

var DMTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
DMTimer.checkFrequency = false;
DMTimer.intFreqs[10].hi = 0;
DMTimer.intFreqs[10].lo = 20000000;
var timerParams2 = new DMTimer.Params();
timerParams2.tsicr.posted = 0;
var DMTimestampProvider = xdc.useModule("ti.sysbios.timers.dmtimer.TimestampProvider");
DMTimestampProvider.timerId = 10;
DMTimestampProvider.useClockTimer = false;
var Timestamp = xdc.useModule("xdc.runtime.Timestamp");
Timestamp.SupportProxy = DMTimestampProvider;

var ipu_pri     = java.lang.System.getenv("IPU_PRIMARY_CORE");

if (ipu_pri == "ipu1_0")
{

if (IpummInclude == "yes")
{
    xdc.loadCapsule("src/rtos/bios_app_common/tda2ex/cfg/IPUMM_config.cfg");
}

Program.sectMap[".bss:NDK_PACKETMEM"]             = "NDK_MEM";
Program.sectMap[".bss:NDK_MMBUFFER"]              = "NDK_MEM";
Program.sectMap[".far:AVBTP_MEMPOOL"]             = "NDK_MEM";
Program.sectMap[".far:CPTS_MEMPOOL"]              = "NDK_MEM";

Program.sectMap[".bss:NDK_PACKETMEM"]             = new Program.SectionSpec();
Program.sectMap[".bss:NDK_PACKETMEM"].type        = "NOLOAD";
Program.sectMap[".bss:NDK_PACKETMEM"].loadSegment = "NDK_MEM";

Program.sectMap[".bss:NDK_MMBUFFER"]              = new Program.SectionSpec();
Program.sectMap[".bss:NDK_MMBUFFER"].type         = "NOLOAD";
Program.sectMap[".bss:NDK_MMBUFFER"].loadSegment  = "NDK_MEM";

Program.sectMap[".far:AVBTP_MEMPOOL"]             = new Program.SectionSpec();
Program.sectMap[".far:AVBTP_MEMPOOL"].type        = "NOLOAD";
Program.sectMap[".far:AVBTP_MEMPOOL"].loadSegment = "NDK_MEM";

Program.sectMap[".far:CPTS_MEMPOOL"]              = new Program.SectionSpec();
Program.sectMap[".far:CPTS_MEMPOOL"].type         = "NOLOAD";
Program.sectMap[".far:CPTS_MEMPOOL"].loadSegment  = "NDK_MEM";

var GenSystemMemMap = xdc.loadCapsule("gen_system_mem_map.xs");

GenSystemMemMap.GenSystemMemMap();
}
