


xdc.useModule('ti.ipc.ipcmgr.IpcMgr')
xdc.loadPackage('ti.ipc.rpmsg');

var Main            = xdc.useModule('xdc.runtime.Main');
var Program         = xdc.useModule('xdc.cfg.Program');
var BIOS            = xdc.useModule('ti.sysbios.BIOS');

var Ipc             = xdc.useModule('ti.sdo.ipc.Ipc');
var Resource        = xdc.useModule('ti.ipc.remoteproc.Resource');
var NotifyDriverShm = xdc.useModule('ti.sdo.ipc.notifyDrivers.NotifyDriverShm');

var Notify          = xdc.useModule('ti.sdo.ipc.Notify');

var System          = xdc.useModule('xdc.runtime.System');
var SysMin          = xdc.useModule('ti.trace.SysMin');
var LoggerSys       = xdc.useModule('xdc.runtime.LoggerSys');
var Defaults        = xdc.useModule('xdc.runtime.Defaults');
var Diags           = xdc.useModule('xdc.runtime.Diags');
var Registry        = xdc.useModule('xdc.runtime.Registry');

var core = java.lang.System.getenv("CORE");


var RobustRvc     = java.lang.System.getenv("ROBUST_RVC_INCLUDE");
BIOS.addUserStartupFunction('&IpcMgr_callIpcStart');

/* Override the default resource table with my own to add SR0 */
Resource.customTable = true;

if(core=="c66xdsp_1")
{
    Resource.loadSegment = "DSP1_CODE_MEM"
    var Interrupt        = xdc.useModule('ti.sdo.ipc.family.vayu.InterruptDsp');
    var profile          = java.lang.System.getenv("PROFILE_c66xdsp_1");

}
else
if(core=="ipu1_0")
{
    var Interrupt = xdc.useModule('ti.sdo.ipc.family.vayu.InterruptIpu');
    var profile   = java.lang.System.getenv("PROFILE_ipu1_0");

}
else
if(core=="ipu2")
{
    Resource.loadSegment = "IPU2_CODE_MEM"
    var Interrupt = xdc.useModule('ti.sdo.ipc.family.vayu.InterruptIpu');
    var profile   = java.lang.System.getenv("PROFILE_ipu2");

}

Notify.SetupProxy               = xdc.useModule('ti.sdo.ipc.family.vayu.NotifySetup');
NotifyDriverShm.InterruptProxy  = Interrupt;



var SR0                   = Program.cpu.memoryMap['SR0'];
var SR1                   = Program.cpu.memoryMap['SR1_FRAME_BUFFER_MEM'];
var IPU1_0_CODE_MEM       = Program.cpu.memoryMap['IPU1_0_CODE_MEM'];
var IPU1_0_DATA_MEM       = Program.cpu.memoryMap['IPU1_0_DATA_MEM'];
var IPU2_CODE_MEM         = Program.cpu.memoryMap['IPU2_CODE_MEM'];
var IPU2_DATA_MEM         = Program.cpu.memoryMap['IPU2_DATA_MEM'];
var DSP1_CODE_MEM         = Program.cpu.memoryMap['DSP1_CODE_MEM'];
var DSP1_DATA_MEM         = Program.cpu.memoryMap['DSP1_DATA_MEM'];
var REMOTE_LOG_MEM        = Program.cpu.memoryMap['REMOTE_LOG_MEM'];
var HDVPSS_DESC_MEM       = Program.cpu.memoryMap['HDVPSS_DESC_MEM'];
var LINK_STATS_MEM        = Program.cpu.memoryMap['LINK_STATS_MEM'];
var SYSTEM_IPC_SHM_MEM    = Program.cpu.memoryMap['SYSTEM_IPC_SHM_MEM'];
var TRACE_BUF             = Program.cpu.memoryMap['TRACE_BUF'];
var EXC_DATA              = Program.cpu.memoryMap['EXC_DATA'];
var PM_DATA               = Program.cpu.memoryMap['PM_DATA'];
var NDK_MEM               = Program.cpu.memoryMap['NDK_MEM'];
var OCMC                  = Program.cpu.memoryMap['OCMC_RAM1'];
var L2SRAM                = Program.cpu.memoryMap['L2SRAM'];
var SR2                   = Program.cpu.memoryMap['SR2_MEM'];



/* Globals with XDC_CFG_ prefix are used to program resource table */
/*
	Make sure below sections are contigous and SR0 is the starting section
	SR0
	REMOTE_LOG_MEM
	LINK_STATS_MEM
	SYSTEM_IPC_SHM_MEM
	HDVPSS_DESC_MEM

	make sure size of each of these section is 4*KB aligned
 */
Program.global.XDC_CFG_SYSTEM_COMMON_SHM_VIRT   = SR0.base;
Program.global.XDC_CFG_SYSTEM_COMMON_SHM_SIZE   = SR0.len + REMOTE_LOG_MEM.len + LINK_STATS_MEM.len + SYSTEM_IPC_SHM_MEM.len + HDVPSS_DESC_MEM.len;

if (java.lang.System.getenv("OPENVX_INCLUDE") == "yes")
{
var OPENVX_SHM_MEM        = Program.cpu.memoryMap['OPENVX_SHM_MEM'];
Program.global.XDC_CFG_SYSTEM_COMMON_SHM_SIZE += OPENVX_SHM_MEM.len
}

Program.global.XDC_CFG_SR1_VIRT                 = SR1.base;
Program.global.XDC_CFG_SR1_VIRT                 = SR1.base;
Program.global.XDC_CFG_SR1_SIZE                 = SR1.len;
Program.global.XDC_CFG_SR2_VIRT                 = SR2.base;
Program.global.XDC_CFG_SR2_SIZE                 = SR2.len;
Program.global.XDC_CFG_IPU1_0_CODE_DATA         = IPU1_0_CODE_MEM.base;
Program.global.XDC_CFG_IPU1_0_CODE_DATA_SIZE    = IPU1_0_CODE_MEM.len + IPU1_0_DATA_MEM.len;
Program.global.XDC_CFG_IPU2_CODE_DATA           = IPU2_CODE_MEM.base;
Program.global.XDC_CFG_IPU2_CODE_DATA_SIZE      = IPU2_CODE_MEM.len + IPU2_DATA_MEM.len;
Program.global.XDC_CFG_DSP1_CODE                = DSP1_CODE_MEM.base;
Program.global.XDC_CFG_DSP1_CODE_SIZE           = DSP1_CODE_MEM.len;
Program.global.XDC_CFG_DSP1_DATA                = DSP1_DATA_MEM.base;
Program.global.XDC_CFG_DSP1_DATA_SIZE           = DSP1_DATA_MEM.len;
Program.global.XDC_CFG_IPC_DATA                 = TRACE_BUF.base;
Program.global.XDC_CFG_IPC_DATA_SIZE            = TRACE_BUF.len + EXC_DATA.len + PM_DATA.len;
Program.global.XDC_CFG_OCMC_SIZE                = OCMC.len;
Program.global.XDC_CFG_NDK_MEM                  = NDK_MEM.base;
Program.global.XDC_CFG_NDK_MEM_SIZE             = NDK_MEM.len;


/* Marking sections as NOLOAD, filesz will be 0x0 for these sections in elf executable */

Program.sectMap[".bss:extMemNonCache:vpdma"]                         = new Program.SectionSpec();
Program.sectMap[".bss:extMemNonCache:vpdma"].loadSegment             = "HDVPSS_DESC_MEM";
Program.sectMap[".bss:extMemNonCache:vpdma"].type                    = "NOLOAD";

Program.sectMap[".bss:extMemNonCache:remoteLogCoreShm"]             = new Program.SectionSpec();
Program.sectMap[".bss:extMemNonCache:remoteLogCoreShm"].loadSegment = "REMOTE_LOG_MEM";
Program.sectMap[".bss:extMemNonCache:remoteLogCoreShm"].type        = "NOLOAD";

Program.sectMap[".bss:extMemNonCache:ipcShm"]             = new Program.SectionSpec();
Program.sectMap[".bss:extMemNonCache:ipcShm"].loadSegment = "SYSTEM_IPC_SHM_MEM";
Program.sectMap[".bss:extMemNonCache:ipcShm"].type        = "NOLOAD";

Program.sectMap[".bss:extMemNonCache:linkStats"]             = new Program.SectionSpec();
Program.sectMap[".bss:extMemNonCache:linkStats"].loadSegment = "LINK_STATS_MEM";
Program.sectMap[".bss:extMemNonCache:linkStats"].type        = "NOLOAD";

if (java.lang.System.getenv("OPENVX_INCLUDE") == "yes")
{
Program.sectMap[".bss:extMemNonCache:tiovxObjDescShm"]             = new Program.SectionSpec();
Program.sectMap[".bss:extMemNonCache:tiovxObjDescShm"].loadSegment = "OPENVX_SHM_MEM";
Program.sectMap[".bss:extMemNonCache:tiovxObjDescShm"].type        = "NOLOAD";
}

Program.sectMap[".bss:heapMemDDR"]              = new Program.SectionSpec();
Program.sectMap[".bss:heapMemDDR"].type         = "NOLOAD";
Program.sectMap[".bss:heapMemDDR"].loadSegment  = "SR1_FRAME_BUFFER_MEM";

Program.sectMap[".bss:heapMem2DDR"]              = new Program.SectionSpec();
Program.sectMap[".bss:heapMem2DDR"].type         = "NOLOAD";
Program.sectMap[".bss:heapMem2DDR"].loadSegment  = "SR2_MEM";

Program.sectMap[".bss:heapMemOCMC"]              = new Program.SectionSpec();
Program.sectMap[".bss:heapMemOCMC"].type         = "NOLOAD";
Program.sectMap[".bss:heapMemOCMC"].loadSegment  = "OCMC_RAM1";

Program.sectMap[".tracebuf"]                                        = "TRACE_BUF";
Program.sectMap[".errorbuf"]                                        = "EXC_DATA";



/*
 *  ======== Instrumentation Configuration ========
 */

/*  Use SysMin because trace buffer address is required for Linux/QNX
 *  trace debug driver, plus provides better performance.
 */
System.SupportProxy = SysMin;
SysMin.bufSize  = 0x8000;

if(profile == "debug")
{
    /* system logger */
    var LoggerSysParams = new LoggerSys.Params();

    Defaults.common$.logger = LoggerSys.create(LoggerSysParams);

    /* enable runtime Diags_setMask() for non-XDC spec'd modules */
    Diags.setMaskEnabled = true;

    /* override diags mask for selected modules */

    Diags.setMaskMeta("xdc.runtime.Main", Diags.ENTRY | Diags.EXIT | Diags.INFO, Diags.RUNTIME_ON);


    Registry.common$.diags_ENTRY = Diags.RUNTIME_OFF;
    Registry.common$.diags_EXIT  = Diags.RUNTIME_OFF;
    Registry.common$.diags_INFO  = Diags.RUNTIME_ON;
    Registry.common$.diags_USER1 = Diags.RUNTIME_ON;
    Registry.common$.diags_LIFECYCLE = Diags.ALWAYS_ON;
    Registry.common$.diags_STATUS = Diags.ALWAYS_ON;

    Main.common$.diags_ASSERT = Diags.ALWAYS_ON;
    Main.common$.diags_INTERNAL = Diags.ALWAYS_ON;
}


