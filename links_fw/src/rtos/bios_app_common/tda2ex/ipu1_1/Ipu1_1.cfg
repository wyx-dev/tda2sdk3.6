
/*******************************************************************************
*  file name: Ipu1_1.cfg
*  Set IPU1 core1 specific configuration
*  Platform: VAYU_bios_elf
*  Target: ti.targets.arm.elf.M4
*
*******************************************************************************/

var CurrentPlatform = java.lang.System.getenv("PLATFORM");

xdc.print("# !!! Current build platform is [" + CurrentPlatform + "] !!!" );

xdc.loadPackage('ti.sysbios').profile = "release";
xdc.loadCapsule("src/rtos/bios_app_common/tda2ex/cfg/BIOS_common.cfg");

var Timer       = xdc.useModule("ti.sysbios.timers.dmtimer.Timer");
/* root of the configuration object model */
var Program      = xdc.useModule('xdc.cfg.Program');
var GIO          = xdc.useModule('ti.sysbios.io.GIO');

var Core         = xdc.useModule("ti.sysbios.family.arm.ducati.Core");
/* set the ipuId and coreId */
Core.ipuId = 1;
Core.id = 1;

var GateDualCore = xdc.useModule('ti.sysbios.family.arm.ducati.GateDualCore');

/* Dual Core Gate Init need to be done from ipu1_1*/
GateDualCore.initGates = true;

var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.smpEnabled = false;

var NdkProcToUse = java.lang.System.getenv("NDK_PROC_TO_USE");

if(NdkProcToUse=="ipu1_1")
{
   xdc.print("# !!! Linking to NDK !!!" );
   xdc.loadCapsule("src/rtos/bios_app_common/tda2ex/cfg/NDK_config.cfg");
}

/*
 *  ======== IPC Configuration ========
 */
Program.global.procName = "IPU1-1";
xdc.loadCapsule("src/rtos/bios_app_common/tda2ex/cfg/IPC_common.cfg");


/*
 *  ======== IPU1 CORE1 Processor (secondary core) ========
 *  AMMU config need to be done only on one core
 *  This is done in primary core (CORE0) , so No need here
 */


/*
 *  ======== Operating System Configuration ========
 */

/* no rts heap */
Program.heap = 0;
Program.argSize = 100;  /* minimum size */
Program.stack = 0x4000;

/* create a default heap */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x40000;

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);
Memory.defaultHeapSize  = 0x15000;


Program.sectMap[".bss:extMemNonCache:remoteLogCoreShm"] = "REMOTE_LOG_MEM";
Program.sectMap[".bss:extMemNonCache:hcfResourceTable"] = "REMOTE_LOG_MEM";
Program.sectMap[".bss:extMemNonCache:ipcShm"] = "SYSTEM_IPC_SHM_MEM";
Program.sectMap[".bss:extMemNonCache:linkStats"] = "LINK_STATS_MEM";
if (java.lang.System.getenv("OPENVX_INCLUDE") == "yes")
{
    Program.sectMap[".bss:extMemNonCache:tiovxObjDescShm"] = "OPENVX_SHM_MEM";
}

Program.sectMap[".text"]                      = "IPU1_1_CODE_MEM";
Program.sectMap[".const"]                     = "IPU1_1_CODE_MEM";
Program.sectMap[".plt"]                       = "IPU1_1_CODE_MEM";

Program.sectMap[".bss"]                       = "IPU1_1_DATA_MEM";
Program.sectMap[".neardata"]                  = "IPU1_1_DATA_MEM";
Program.sectMap[".rodata"]                    = "IPU1_1_DATA_MEM";

Program.sectMap[".bss:taskStackSection"]      = "IPU1_1_DATA_MEM";
Program.sectMap[".bss:NDK_PACKETMEM"]         = "NDK_MEM";
Program.sectMap[".bss:NDK_MMBUFFER"]          = "NDK_MEM";

/* Exception hook function */
var HwiM3       = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');

/* enable print of exception handing info */
HwiM3.enableException = true;
HwiM3.nvicCCR.DIV_0_TRP = 1;
HwiM3.excHookFunc = '&Utils_m4ExceptionHookFxn';

/* XDC runtime function */
var Error = xdc.useModule("xdc.runtime.Error");
Error.raiseHook = "&Utils_commonErrorRaiseHook";

var InitXbar    = xdc.useModule("ti.sysbios.family.shared.vayu.IntXbar");

/* Add an idle thread 'Utils_idleFxn' that monitors interrupts. */
var Idle = xdc.useModule("ti.sysbios.knl.Idle");
Idle.addFunc('&Utils_idleFxn');

/***********************************************
 *          CLOCK Module Configuraion          *
 ***********************************************/
var Clock = xdc.useModule("ti.sysbios.knl.Clock");
Clock.tickMode = Clock.TickMode_PERIODIC;
Clock.tickSource = Clock.TickSource_USER;

/***********************************************
*           Timer Module Configuraion         *
***********************************************/
var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');

Timer.intFreqs[8].hi = 0;
/* system clock runs at 20 MHz */
Timer.intFreqs[8].lo = 20000000;

var timerParams = new Timer.Params();
timerParams.period = 1000;
timerParams.twer.ovf_wup_ena = 1;
timerParams.tiocpCfg.emufree = 1;
timerParams.tsicr.posted = 0;
Timer.create(8, '&mainIPU1_C1TimerTick', timerParams);

var DMTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
var timerParams2 = new DMTimer.Params();
timerParams2.tsicr.posted = 0;
DMTimer.intFreqs[10].hi = 0;
DMTimer.intFreqs[10].lo = 20000000;
var DMTimestampProvider = xdc.useModule("ti.sysbios.timers.dmtimer.TimestampProvider");
DMTimestampProvider.timerId = 10;
DMTimestampProvider.useClockTimer = false;
var Timestamp = xdc.useModule("xdc.runtime.Timestamp");
Timestamp.SupportProxy = DMTimestampProvider;

/* allocate timer 9 to IPU0 */
var TimerSupport = xdc.useModule('ti.sysbios.family.shared.vayu.TimerSupport');
TimerSupport.availMask = 0x0500;

/* In order to check how much percentange of Idle time the CPU is in Low power */
var LocalTimestampProvider = xdc.useModule('ti.sysbios.family.arm.ducati.TimestampProvider');
