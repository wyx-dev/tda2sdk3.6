
/*******************************************************************************
*  Set IPU1 core0 specific configuration when IPUMM is included in the image
*******************************************************************************/


/*
 *  This NDK_MEM needs to be mapped one to one in L2MMU of IPU
 *  throuh resource table.
 */
var Program         = xdc.useModule('xdc.cfg.Program');

xdc.loadCapsule("src/rtos/bios_app_common/tda2px/cfg/IPC_RpMsgDrv.cfg");

print('configuring IPUMM...');

Program.global.coreName = "ipu";

xdc.loadPackage('ti.sdo.ipc.family.vayu');
xdc.useModule('ti.sdo.ipc.family.vayu.InterruptIpu');
xdc.loadPackage('ti.ipc.rpmsg');
xdc.loadPackage('ti.ipc.family.vayu');

/* Idle functions - PM functions should be last */
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
/* Function to flush unicache in each core */
Idle.addCoreFunc('&VirtQueue_cacheWb', 0);
Idle.addCoreFunc('&VirtQueue_cacheWb', 1);

/* ipumm config */
xdc.loadPackage('ti.ipc.mm');
xdc.loadPackage('ti.ipc.ipcmgr');
xdc.loadPackage('ti.srvmgr');
xdc.loadPackage('ti.srvmgr.omaprpc');

xdc.loadPackage('ti.framework.dce');
xdc.useModule('platform.ti.dce.baselib.BASELIB');

var Memory                      = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapSize = 0x20000;
var HeapMem                     = xdc.useModule('ti.sysbios.heaps.HeapMem');
var GateHwi                     = xdc.useModule('ti.sysbios.gates.GateHwi');
HeapMem.common$.gate = GateHwi.create();

/* Heap Memory is set to 40 MB of the total 150 MB of EXT_HEAP.
 * This is considering 2 1080p instances of Mpeg4 Decoders, each
 * requiring 14 MBs and a single instance of H264 Encode requiring
 * 8 MBs running parallely.
 */

var heapMemParams                       = new HeapMem.Params;
heapMemParams.size                      = 0x2800000; // 40MB
heapMemParams.sectionName       = ".systemHeap";
var heap0                                       = HeapMem.create(heapMemParams);
Memory.defaultHeapInstance      = heap0;
Program.global.heap0            = heap0;

/*
 * Setup memory map.
 */

var ipu_pri     = java.lang.System.getenv("IPU_PRIMARY_CORE");
if (ipu_pri == "ipu1")
{
/* Mark heaps as NOINIT for optimizing boot-time */
Program.sectMap[".systemHeap"] = new Program.SectionSpec();
Program.sectMap[".systemHeap"].loadSegment = "IPU1_0_DATA_MEM";
Program.sectMap[".systemHeap"].type = "NOINIT";

/* Work-around for .const loading issues with MPEG4/VC1 codecs.. move AMMU
 * tables out of .const into .txt so that they have valid data when AMMU
 * is programmed (which happens before cinit initializes rw sections..
 * which is what .const becomes due to rw var mistakenly placed on .const
 */
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_mmuInitConfig__C"] = "IPU1_0_CODE_MEM";
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_numLargePages__C"] = "IPU1_0_CODE_MEM";
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_numLinePages__C"] = "IPU1_0_CODE_MEM";
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_numMediumPages__C"] = "IPU1_0_CODE_MEM";
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_numSmallPages__C"] = "IPU1_0_CODE_MEM";
}
else
{
/* Mark heaps as NOINIT for optimizing boot-time */
Program.sectMap[".systemHeap"] = new Program.SectionSpec();
Program.sectMap[".systemHeap"].loadSegment = "IPU2_DATA_MEM";
Program.sectMap[".systemHeap"].type = "NOINIT";

/* Work-around for .const loading issues with MPEG4/VC1 codecs.. move AMMU
 * tables out of .const into .txt so that they have valid data when AMMU
 * is programmed (which happens before cinit initializes rw sections..
 * which is what .const becomes due to rw var mistakenly placed on .const
 */
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_mmuInitConfig__C"] = "IPU2_CODE_MEM";
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_numLargePages__C"] = "IPU2_CODE_MEM";
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_numLinePages__C"] = "IPU2_CODE_MEM";
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_numMediumPages__C"] = "IPU2_CODE_MEM";
Program.sectMap[".const:ti_sysbios_hal_ammu_AMMU_numSmallPages__C"] = "IPU2_CODE_MEM";
}

/*
 *  ======== CODEC ENGINE configurations  ========
 */

var Global = xdc.useModule('ti.sdo.ce.osal.Global');
Global.runtimeEnv = Global.DSPBIOS;

xdc.useModule('ti.sdo.ce.global.Settings').profile    = "debug";
xdc.loadPackage('ti.sdo.ce.video').profile            = "debug";
xdc.loadPackage('ti.sdo.ce.video3').profile           = "debug";
xdc.loadPackage('ti.sdo.ce.alg').profile              = "debug";
xdc.useModule('ti.sdo.fc.global.Settings').profile    = "debug";
xdc.loadPackage('ti.sdo.fc.rman').profile             = "debug";
xdc.loadPackage('ti.sdo.fc.ires.hdvicp').profile      = "debug";
xdc.loadPackage('ti.sdo.fc.utils').profile            = "debug";

var ipcSettings = xdc.useModule('ti.sdo.ce.ipc.Settings');
ipcSettings.ipc = xdc.useModule('ti.sdo.ce.ipc.bios.Ipc');
// set to true to enable debugging of codec engine
xdc.useModule('ti.sdo.ce.Settings').checked         = true;

/* Enable Memory Translation module that operates on the BIOS Resource Table */
var Resource = xdc.useModule('ti.ipc.remoteproc.Resource');
Resource.customTable = true;

//set All heaps of dskts as the default heap0
var DSKT2           = xdc.useModule('ti.sdo.fc.dskt2.DSKT2');
DSKT2.DARAM0    = "heap0";
DSKT2.DARAM1    = "heap0";
DSKT2.DARAM2    = "heap0";
DSKT2.SARAM0    = "heap0";
DSKT2.SARAM1    = "heap0";
DSKT2.SARAM2    = "heap0";
DSKT2.ESDATA    = "heap0";
DSKT2.IPROG     = "heap0";
DSKT2.EPROG     = "heap0";
DSKT2.DSKT2_HEAP     = "heap0";

var HDVICP20= xdc.useModule('ti.sdo.codecs.hdvicp20api.HDVICP20API');

//Remove these as it is done in ivahd.c
var HDVICP2                      = xdc.useModule('ti.sdo.fc.ires.hdvicp.HDVICP2');
HDVICP2.memoryBaseAddress[0]     = 0x7B000000;
HDVICP2.registerBaseAddress[0]   = 0x7A000000;
HDVICP2.resetControlAddress[0]      = 0x6AE07210;
HDVICP2.resetFxn                 = "ivahd_reset";

xdc.useModule('ti.sdo.fc.rman.RMAN');

// Load decoder/encoder APIs:
var VIDDEC3 = xdc.useModule('ti.sdo.ce.video3.IVIDDEC3');
var VIDENC2 = xdc.useModule('ti.sdo.ce.video2.IVIDENC2');

// load whatever codecs are available in the build
var codecs = [];

function loadCodec(pkg, name)
{
        try {
                var codec = xdc.useModule(pkg);
                print('loading: ' + name);
                codecs.push({ name: name, mod: codec, local: true });
        } catch(e) {
                print('no package: ' + pkg);
        }
}

loadCodec('ti.sdo.codecs.mpeg4vdec.ce.MPEG4VDEC', 'ivahd_mpeg4dec');
loadCodec('ti.sdo.codecs.h264vdec.ce.H264VDEC',   'ivahd_h264dec');
loadCodec('ti.sdo.codecs.jpegvdec.ce.JPEGVDEC',  'ivahd_jpegvdec');
loadCodec('ti.sdo.codecs.vc1vdec.ce.VC1VDEC',    'ivahd_vc1vdec');
loadCodec('ti.sdo.codecs.mpeg2vdec.ce.MPEG2VDEC','ivahd_mpeg2vdec');
loadCodec('ti.sdo.codecs.h264enc.ce.H264ENC',    'ivahd_h264enc');
loadCodec('ti.sdo.codecs.mpeg4enc.ce.MPEG4ENC',  'ivahd_mpeg4enc');

var engine         = xdc.useModule('ti.sdo.ce.Engine');
var myEngine       = engine.create("ivahd_vidsvr", codecs);

xdc.useModule('ti.sysbios.knl.Task');
var Task = xdc.useModule('ti.sysbios.knl.Task');
Task.defaultStackSize = 12 * 0x400;

// Enable load computation.
var Load = xdc.useModule('ti.sysbios.utils.Load');
Load.updateInIdle = true;
Load.windowInMs = 11;

// Disabled BIOS asserts when using IPUMM, because IPUMM is
// using pthread_mutex from a Task context, which is not supported
// and causes BIOS asserts. IPUMM needs to be updated to use a
// different mechanism for synchronization.
BIOS                = xdc.useModule('ti.sysbios.BIOS');
BIOS.assertsEnabled = false;

var Settings = xdc.useModule('ti.sysbios.posix.Settings');
Settings.supportsMutexPriority = true;
