
/*******************************************************************************
*  file name: NDK_config.cfg
*  This file is included in the core which uses NDK
*
*******************************************************************************/

var enableInstrumentation  = 0;
var enableStaticIpEth0     = 0;
var enableStaticIpEth1     = 0;
var enableTelnet           = 1;


/* use modules */
var BIOS        = xdc.useModule("ti.sysbios.BIOS");
var IntXbar     = xdc.useModule('ti.sysbios.family.shared.vayu.IntXbar');
var NdkProcToUse = java.lang.System.getenv("NDK_PROC_TO_USE");
var NspTfdtpInclude = java.lang.System.getenv("NSP_TFDTP_INCLUDE");
var enableIPv6 = java.lang.System.getenv("NDK_ENABLE_IPV6");
var DualA15_smpbios = java.lang.System.getenv("DUAL_A15_SMP_BIOS");

if(NdkProcToUse=="a15_0")
{
   var Hwi     = xdc.useModule('ti.sysbios.family.arm.gic.Hwi');
}
else
{
   var Hwi     = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');
}

/* NDK modules */
var NdkConfigGlobal = xdc.useModule('ti.ndk.config.Global');
var Ip              = xdc.useModule('ti.ndk.config.Ip');
var Tcp             = xdc.useModule('ti.ndk.config.Tcp');
var Udp             = xdc.useModule('ti.ndk.config.Udp');
var Telnet          = xdc.useModule('ti.ndk.config.Telnet');

if(DualA15_smpbios=="yes")
{
  /* Use semaphore exclusion for SMP environment */
  NdkConfigGlobal.useSemLibs = true;
}

/* NSP Driver */
var GMACSW          = xdc.useModule('ti.nsp.drv.GMACSW');

if (enableInstrumentation)
{
    GMACSW.instrumentedBuild = true;
}
else
{
    GMACSW.instrumentedBuild = false;
}


/* Enalbe TFDTP Stack in NSP */
if (NspTfdtpInclude == "yes")
{
    GMACSW.tfdtpBuild = true;
    NdkConfigGlobal.stackBeginHook = '&Utils_tfdtpDmaInit';
    NdkConfigGlobal.networkIPAddrHook   = '&Network_ndkIPAddrHookFxn';
}

if (java.lang.System.getenv("AVB_INCLUDE") == "yes")
{
    /* AVBTP stack */
    var AVBTP           = xdc.useModule('ti.avbtp.AVBTP');
    if (enableInstrumentation)
    {
        AVBTP.instrumentedBuild = true;
    }
    else
    {
        AVBTP.instrumentedBuild = false;
    }
}

/**********************************************************************\
|                      Miscellaneous Configuration                     |
\**********************************************************************/

/* Specify startup init function for Bios */
BIOS.startupFxns = ['&NDK_NSP_Init'];      /* call the init function at startup time */

var irqOffset = 0;

if(NdkProcToUse=="a15_0")
{
   irqOffset = 32;
}

/* GMAC_SW RX_THRESH_PULSE Interrupt */
IntXbar.connectIRQMeta(57, 334);
var hwi_param_0 = new Hwi.Params;
hwi_param_0.arg = 0;
Hwi.create(57+irqOffset, '&HwIntRxThresh', hwi_param_0);

/* GMAC_SW RX_PULSE Interrupt */
IntXbar.connectIRQMeta(58, 335);
var hwi_param_1 = new Hwi.Params;
hwi_param_1.arg = 0;
Hwi.create(58+irqOffset, '&HwIntRx', hwi_param_1);

/* GMAC_SW TX_PULSE Interrupt */
IntXbar.connectIRQMeta(59, 336);
var hwi_param_2 = new Hwi.Params;
hwi_param_2.arg = 0;
Hwi.create(59+irqOffset, '&HwIntTx', hwi_param_2);

/* GMAC_SW MISC_PULSE Interrupt */
IntXbar.connectIRQMeta(60, 337);
var hwi_param_3 = new Hwi.Params;
hwi_param_3.arg = 0;
Hwi.create(60+irqOffset, '&HwIntMisc', hwi_param_3);


/**********************************************************************\
|                          NDK configuration                           |
\**********************************************************************/

/* select the stack library we want */
if (enableIPv6 == "yes")
{
    NdkConfigGlobal.IPv6            = true;
}
else
{
    NdkConfigGlobal.IPv6            = false;
}

NdkConfigGlobal.stackLibType    = NdkConfigGlobal.MIN;
NdkConfigGlobal.netSchedulerPri = NdkConfigGlobal.NC_PRIORITY_HIGH;
NdkConfigGlobal.debugAbortLevel = NdkConfigGlobal.DBG_NONE;
NdkConfigGlobal.debugPrintLevel = NdkConfigGlobal.DBG_NONE;

/* Assign memory sections and sizes */
NdkConfigGlobal.pbmDataSection      = ".bss:NDK_PACKETMEM";
NdkConfigGlobal.memDataSection      = ".bss:NDK_MMBUFFER";
NdkConfigGlobal.lowTaskStackSize    = 8192;
NdkConfigGlobal.normTaskStackSize   = 8192;
NdkConfigGlobal.highTaskStackSize   = 8192;
NdkConfigGlobal.ndkThreadStackSize  = 8192;
NdkConfigGlobal.pktSizeFrameBuf     = 1536;
if (NspTfdtpInclude == "yes")
{
    /* TFDTP stack needs at least 512 NDK Frame buffers */
    NdkConfigGlobal.pktNumFrameBufs = 512;
}
else
{
    NdkConfigGlobal.pktNumFrameBufs = 384;
}
NdkConfigGlobal.memRawPageSize      = 3072;
NdkConfigGlobal.memRawPageCount     = 16;

/* Use hook functions available in the ti.ndk.config.Global module to add CGI commands */
/*Add a stackInitHook function to congifure the second mac port a static or dynamic*/
if(enableStaticIpEth1)
{
    NdkConfigGlobal.stackInitHook       = '&stackInitHookStaticEth1';
}
else
{
    NdkConfigGlobal.stackInitHook       = '&stackInitHookDynEth1';
}
NdkConfigGlobal.networkOpenHook     = '&netOpenHook';
NdkConfigGlobal.networkCloseHook    = '&netCloseHook';

/* change the size of our receive buffers */
Tcp.transmitBufSize     = 64*1024;
Tcp.receiveBufSize      = 64*1024;
Tcp.receiveBufLimit     = 64*1024;
Udp.receiveBufSize      = 64*1024;

/* increase buffer sizes when NDK runs on A15 to get higher throughput */
if(NdkProcToUse=="a15_0")
{
    NdkConfigGlobal.pktNumFrameBufs     = 192*8;
    NdkConfigGlobal.memRawPageCount     = 16*8;
    Tcp.transmitBufSize                 = 256*1024;
    Tcp.receiveBufSize                  = 256*1024;
    Tcp.receiveBufLimit                 = 256*1024;
}

if (enableStaticIpEth0)
{
    /* Settings for static IP configuration */
    Ip.address = "192.168.1.200";
    Ip.mask = "255.255.255.0";
    Ip.gatewayIpAddr = "192.168.1.1";
    Ip.ifIdx = 1;
}
else
{
    Ip.dhcpClientMode = Ip.CIS_FLG_IFIDXVALID;
}

if(enableTelnet)
{
    /* Add a Telnet server */
    var telnetParams = new Telnet.Params();
    telnetParams.callBackFxn = '&ConsoleOpen';
    var telnet = Telnet.create(telnetParams);

    /* Add some user accounts */
    var acct1 = new NdkConfigGlobal.Account();
    acct1.username = "username";
    acct1.password = "password";
    NdkConfigGlobal.addUserAccount(acct1);
}
