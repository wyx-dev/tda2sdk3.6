
/*******************************************************************************
*  file name: Ammu1.cfg
*  Set IPU1 (core 0 and core 1) AMMU configuration
*
*******************************************************************************/


function init()
{
    var Program = xdc.useModule('xdc.cfg.Program');
    var IpummInclude = java.lang.System.getenv("IPUMM_INCLUDE");
    var Cache = xdc.useModule('ti.sysbios.hal.unicache.Cache');
    Cache.enableCache = true;

    var AMMU = xdc.useModule('ti.sysbios.hal.ammu.AMMU');
    AMMU.configureAmmu = true;

    if (IpummInclude == "yes")
    {
    var entry = AMMU.smallPages[1];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x40000000;
    entry.translatedAddress = 0x55080000;
    entry.size = AMMU.Small_16K;
    }

    var entry = AMMU.smallPages[2];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x00004000;
    entry.translatedAddress = 0x55024000;
    entry.size = AMMU.Small_16K;
    entry.volatileQualifier = AMMU.Volatile_DO_NOT_FOLLOW;
    entry.L1_cacheable = AMMU.CachePolicy_CACHEABLE;

    var entry = AMMU.smallPages[3];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x00008000;
    entry.translatedAddress = 0x55028000;
    entry.size = AMMU.Small_16K;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;

    var entry = AMMU.smallPages[4];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x20000000;
    entry.translatedAddress = 0x55020000;
    entry.size = AMMU.Small_16K;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;

    if (IpummInclude == "yes")
    {
    var entry = AMMU.smallPages[5];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x2000C000;
    entry.translatedAddress = 0x5502C000;
    entry.size = AMMU.Small_16K;
    entry.L1_cacheable = AMMU.CachePolicy_CACHEABLE;
    entry.L1_writePolicy = AMMU.WritePolicy_WRITE_BACK;
    entry.L1_allocate    = AMMU.AllocatePolicy_ALLOCATE;
    entry.L1_posted = AMMU.PostedPolicy_POSTED;
    }

    /*********************** Medium Pages *************************/
    var entry = AMMU.mediumPages[0];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x42200000;
    entry.translatedAddress = 0x62200000;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.size = AMMU.Medium_256K;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_writePolicy = AMMU.WritePolicy_WRITE_THROUGH;
    entry.L1_allocate    = AMMU.AllocatePolicy_NON_ALLOCATE;
    entry.L1_posted = AMMU.PostedPolicy_NON_POSTED;

    var entry = AMMU.mediumPages[1];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x42240000;
    entry.translatedAddress = 0x62240000;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.size = AMMU.Medium_256K;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_writePolicy = AMMU.WritePolicy_WRITE_THROUGH;
    entry.L1_allocate    = AMMU.AllocatePolicy_NON_ALLOCATE;
    entry.L1_posted = AMMU.PostedPolicy_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;


    /*********************** Large Pages *************************/
    var entry = AMMU.largePages[0];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x40000000;
    entry.translatedAddress = 0x40000000;
    entry.size = AMMU.Large_512M;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_NON_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;

    /* map program code/data memory into ammu (cacheable) */
    var entry = AMMU.largePages[1];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x80000000;
    entry.translatedAddress = 0x80000000;
    entry.size = AMMU.Large_512M;
    entry.L1_cacheable = AMMU.CachePolicy_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_POSTED;
    entry.L1_allocate = AMMU.AllocatePolicy_ALLOCATE;
    entry.L1_writePolicy = AMMU.WritePolicy_WRITE_BACK;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;

    /* map SR_0 data memory into ammu (non-cacheable) */
    var entry = AMMU.largePages[2];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0xA0000000;
    entry.translatedAddress = 0xA0000000;
    entry.size = AMMU.Large_512M;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_NON_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;

    var entry = AMMU.largePages[3];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x60000000;
    /* Linux on A15 enables L2MMU, keeping one-is-to-one mapping in AMMU because IPU's vring is
     * assumed to be at 0x60000000 virtual in ipc
     */
    entry.translatedAddress = 0x60000000;
    entry.size = AMMU.Large_512M;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_NON_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;
}

