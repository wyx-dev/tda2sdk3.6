
/*******************************************************************************
*  file name: IPC_common.cfg
*  Set IPC configuration - Common across all cores
*  This file is included in all core specific cfg files
*
*******************************************************************************/


var Program = xdc.useModule('xdc.cfg.Program');
var cfgArgs = Program.build.cfgArgs;
var UseIpcLib = java.lang.System.getenv("IPC_LIB_INCLUDE");

if (UseIpcLib != "yes")
{
    /* configure processor names */

    var procNameAry = new Array();

    var curProc = 0;

    if(java.lang.System.getenv("PROC_IPU1_0_INCLUDE")=="yes")
    {
       procNameAry[parseInt(curProc)] = "IPU1-0";
       xdc.print("# !!! Including CPU #" + parseInt(curProc) + " [ " + procNameAry[parseInt(curProc)] + " ] in build !!!" );
       curProc++;
    }

    if(java.lang.System.getenv("PROC_IPU1_1_INCLUDE")=="yes")
    {
       procNameAry[parseInt(curProc)] = "IPU1-1";
       xdc.print("# !!! Including CPU #" + parseInt(curProc) + " [ " + procNameAry[parseInt(curProc)] + " ] in build !!!" );
       curProc++;
    }

    if(java.lang.System.getenv("PROC_DSP1_INCLUDE")=="yes")
    {
       procNameAry[parseInt(curProc)] = "DSP1";
       xdc.print("# !!! Including CPU #" + parseInt(curProc) + " [ " + procNameAry[parseInt(curProc)] + " ] in build !!!" );
       curProc++;
    }

    if(java.lang.System.getenv("PROC_DSP2_INCLUDE")=="yes")
    {
       procNameAry[parseInt(curProc)] = "DSP2";
       xdc.print("# !!! Including CPU #" + parseInt(curProc) + " [ " + procNameAry[parseInt(curProc)] + " ] in build !!!" );
       curProc++;
    }

    if(java.lang.System.getenv("PROC_EVE1_INCLUDE")=="yes")
    {
       procNameAry[parseInt(curProc)] = "EVE1";
       xdc.print("# !!! Including CPU #" + parseInt(curProc) + " [ " + procNameAry[parseInt(curProc)] + " ] in build !!!" );
       curProc++;
    }

    /* configure the notify driver for this platform */
    var MultiProc = xdc.useModule('ti.sdo.utils.MultiProc');
    var Notify    = xdc.useModule('ti.sdo.ipc.Notify');


       xdc.loadCapsule("src/rtos/bios_app_common/tda3xx/cfg/IPC_NotifyDrv.cfg");

    MultiProc.setConfig(Program.global.procName, procNameAry);

    /* ipc configuration */
    var Ipc = xdc.useModule('ti.sdo.ipc.Ipc');

    /* Set host id */
    Ipc.hostProcId = MultiProc.getIdMeta("IPU1-0");
    Ipc.sr0MemorySetup = true;
    Ipc.generateSlaveDataForHost = false;

    var srOwnerProcId = Ipc.hostProcId;

    xdc.print("# !!! Host Proc ID is [" + Ipc.hostProcId + "] !!!" );

    Ipc.procSync = Ipc.ProcSync_ALL;

    /* To avoid wasting shared memory for MessageQ transports */
    for (var i=0; i < MultiProc.numProcessors; i++)
    {
            Ipc.setEntryMeta({
                remoteProcId: i,
                setupNotify:true,
                setupMessageQ:false
            });
    }

    /* shared region configuration */
    var SharedRegion = xdc.useModule('ti.sdo.ipc.SharedRegion');

    /* Set Shared Region variables by picking up the information from Platform
     * memory map
     */
    var sr0MemSection           = Program.cpu.memoryMap['SR0'];

    /*
     *  Need to define the shared region. The IPC modules use this
     *  to make portable pointers. All processors need to add this
     *  call with their base address of the shared memory region.
     *  If the processor cannot access the memory, do not add it.
     */

    /*
      This section is the SR0 section of IPC and is
      used for MsgQ's that are present on different processors.
      This section MUST be non-cached on all processor's
    */
    SharedRegion.setEntryMeta( 0,
        {
          base:        sr0MemSection.base,
          len:         sr0MemSection.len,
          name:        sr0MemSection.name,
          isValid:     true,
          ownerProcId: srOwnerProcId,
          cacheEnable: false,
          cacheLineSize: 128,
          createHeap:  true
        }
    );
}

