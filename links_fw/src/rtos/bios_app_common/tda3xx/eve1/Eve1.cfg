
/*******************************************************************************
*  file name: Eve1.cfg
*  Set EVE core 1 specific configuration
*  Platform: VAYU_bios_elf
*  Target: ti.targets.arp32.elf.ARP32_far
*
*******************************************************************************/

var CurrentPlatform = java.lang.System.getenv("PLATFORM");

xdc.print("# !!! Current build platform is [" + CurrentPlatform + "] !!!" );

xdc.loadPackage('ti.sysbios').profile = "release";
xdc.loadCapsule("src/rtos/bios_app_common/tda3xx/cfg/BIOS_common.cfg");

var Clock        = xdc.useModule("ti.sysbios.knl.Clock");
Clock.tickPeriod = 1000*10;
Clock.tickMode = Clock.TickMode_PERIODIC;
Clock.tickSource = Clock.TickSource_USER;

/* root of the configuration object model */
var Program = xdc.useModule('xdc.cfg.Program');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.cpuFreq.hi = 0;
BIOS.cpuFreq.lo = 250000000;

/***********************************************
 *          Reset Module Configuraion        *
 ***********************************************/
var Reset = xdc.useModule('xdc.runtime.Reset');
Reset.fxns[Reset.fxns.length++] = "&eve1MmuConfig";

var InitXbar    = xdc.useModule("ti.sysbios.family.shared.vayu.IntXbar");

/*
 *  ======== IPC Configuration ========
 */
Program.global.procName = "EVE1";
xdc.loadCapsule("src/rtos/bios_app_common/tda3xx/cfg/IPC_common.cfg");


/*
 *  ======== Operating System Configuration ========
 */

/* no rts heap */
Program.heap = 0;
Program.argSize = 100;  /* minimum size */
Program.stack = 0x1000;

/* create a default heap */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x40000;

var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);


Program.sectMap[".bss:extMemNonCache:remoteLogCoreShm"] = "REMOTE_LOG_MEM";
Program.sectMap[".bss:extMemNonCache:hcfResourceTable"] = "REMOTE_LOG_MEM";
Program.sectMap[".bss:extMemNonCache:ipcShm"] = "SYSTEM_IPC_SHM_MEM";
Program.sectMap[".bss:extMemNonCache:linkStats"] = "LINK_STATS_MEM";
if (java.lang.System.getenv("OPENVX_INCLUDE") == "yes")
{
    Program.sectMap[".bss:extMemNonCache:tiovxObjDescShm"] = "OPENVX_SHM_MEM";
}

Program.sectMap[".inthandler"]              = "EVE1_CODE_MEM";
Program.sectMap[".text"]                    = "EVE1_CODE_MEM";
Program.sectMap[".vecs"]                    = "EVE1_VECS_MEM";
Program.sectMap[".bss:taskStackSection"]    = "EVE1_DATA_MEM";
Program.sectMap[".rodata"]                  = "EVE1_DATA_MEM";
Program.sectMap[".bss"]                     = "EVE1_DATA_MEM";
Program.sectMap[".init_array"]              = "EVE1_DATA_MEM";
Program.sectMap[".const"]                   = "EVE1_DATA_MEM";
Program.sectMap[".data"]                    = "EVE1_DATA_MEM";
Program.sectMap[".cinit"]                   = "EVE1_DATA_MEM";
Program.sectMap[".switch"]                  = "EVE1_DATA_MEM";
Program.sectMap[".sysmem"]                  = "EVE1_DATA_MEM";
Program.sectMap[".far"]                     = "EVE1_DATA_MEM";
Program.sectMap[".cio"]                     = "EVE1_DATA_MEM";
Program.sectMap[".fardata"]                 = "EVE1_DATA_MEM";
Program.sectMap[".stack"]                   = "EVE1_DATA_MEM";
Program.sectMap[".sysmem"]                  = "EVE1_DATA_MEM";
Program.sectMap[".args"]                    = "EVE1_DATA_MEM";
Program.sectMap[".imemha"]                  = "IBUFHA";
Program.sectMap[".imemhb"]                  = "IBUFHB";
Program.sectMap[".imemla"]                  = "IBUFLA";
Program.sectMap[".imemlb"]                  = "IBUFLB";
Program.sectMap[".wmem"]                    = "WBUF";
Program.sectMap[".vcop_parameter_block"]    = "WBUF";
Program.sectMap["Cdata"]                    = "WBUF";
Program.sectMap["Udata"]                    = "WBUF";
Program.sectMap[".bss:heapMemL2"]           = "DMEM";
if (java.lang.System.getenv("WORKQ_INCLUDE") == "yes")
{
    Program.sectMap[".bss:taskStackSection:systemTskMultiMbx"]= "EVE1_DATA_MEM";
    Program.sectMap[".bss:taskStackSection:workQueueTsk"]= "DMEM";
}
else
{
    Program.sectMap[".bss:taskStackSection:systemTskMultiMbx"]= "DMEM";
    Program.sectMap[".bss:taskStackSection:workQueueTsk"]= "EVE1_DATA_MEM";
}
Program.sectMap[".ttbSection"] = new Program.SectionSpec();
Program.sectMap[".ttbSection"].loadSegment = "EVE1_DATA_MEM";
Program.sectMap[".ttbSection"].type = "NOINIT";

/* Exception hook function */
//var ExceptionEve = xdc.useModule('ti.sysbios.family.arm.exc.Exception');

/* enable print of exception handing info */
//ExceptionEve.excHookFunc ='&Utils_eveExceptionHookFxn';
//ExceptionEve.enableDecode=false;

/* XDC runtime function */
var Error = xdc.useModule("xdc.runtime.Error");
Error.raiseHook = "&Utils_commonErrorRaiseHook";

/* ENABLING TIMER */
var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
/* allocate timer 1 & 2 to EVE */
var TimerSupport = xdc.useModule('ti.sysbios.family.shared.vayu.TimerSupport');
TimerSupport.availMask = 0x0003;

var timerParams = new Timer.Params();
timerParams.period = 1000*10;
timerParams.twer.ovf_wup_ena = 1;
timerParams.tiocpCfg.emufree = 1;
timerParams.tiocpCfg.idlemode = 1;
timerParams.tsicr.posted = 0;
Timer.intFreqs[0].hi = 0;
Timer.intFreqs[0].lo = 20000000;
Timer.checkFrequency = false;

Timer.create(0 , '&mainARP32_0_TimerTick', timerParams);

var DMTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
DMTimer.checkFrequency = false;
DMTimer.intFreqs[1].hi = 0;
DMTimer.intFreqs[1].lo = 20000000;
var timerParams2 = new DMTimer.Params();
timerParams2.tsicr.posted = 0;
var DMTimestampProvider = xdc.useModule("ti.sysbios.timers.dmtimer.TimestampProvider");
DMTimestampProvider.timerId = 1;
DMTimestampProvider.useClockTimer = false;
var Timestamp = xdc.useModule("xdc.runtime.Timestamp");
Timestamp.SupportProxy = DMTimestampProvider;

/* Add an idle thread 'Utils_idleFxn' that monitors interrupts. */
var Idle = xdc.useModule("ti.sysbios.knl.Idle");
Idle.addFunc('&Utils_idleFxn');

/* In order to check how much percentange of Idle time the CPU is in Low power */
var LocalTimestampProvider = xdc.useModule('ti.sysbios.family.arp32.TimestampProvider');
