
/*******************************************************************************
*  file name: Ipu1_0.cfg
*  Set IPU1 core0 specific configuration
*  Platform: VAYU_bios_elf
*  Target: ti.targets.arm.elf.M4
*
*******************************************************************************/

var CurrentPlatform = java.lang.System.getenv("PLATFORM");

xdc.print("# !!! Current build platform is [" + CurrentPlatform + "] !!!" );

xdc.loadPackage('ti.sysbios').profile = "release";
xdc.loadCapsule("src/rtos/bios_app_common/tda3xx/cfg/BIOS_common.cfg");

var NdkProcToUse = java.lang.System.getenv("NDK_PROC_TO_USE");
var DualM4_smpbios = java.lang.System.getenv("IPU1_SMP_BIOS");

if(NdkProcToUse=="ipu1_0")
{
    xdc.print("# !!! Linking to NDK !!!" );
    xdc.loadCapsule("src/rtos/bios_app_common/tda3xx/cfg/NDK_config.cfg");
}

var Timer       = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
/* root of the configuration object model */
var Program      = xdc.useModule('xdc.cfg.Program');
var GIO          = xdc.useModule('ti.sysbios.io.GIO');

var Core         = xdc.useModule('ti.sysbios.family.arm.ducati.Core');
/* set the ipuId and coreId */
Core.ipuId = 1;
Core.id = 0;

var System      = xdc.useModule("xdc.runtime.System");

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Idle = xdc.useModule("ti.sysbios.knl.Idle");

if(DualM4_smpbios=="yes")
{
    BIOS.smpEnabled = true;

    var SysStd  = xdc.useModule("ti.sysbios.smp.SysStd");
    System.SupportProxy = SysStd;
    /* create a logger instance */
    var LoggerBuf = xdc.useModule('ti.sysbios.smp.LoggerBuf');
    var SysMin = xdc.useModule('ti.sysbios.smp.SysMin');

    /* Add an idle thread 'Utils_idleFxn' for each cores.*/
    Idle.addCoreFunc('&Utils_idleFxn', 0);
    Idle.addCoreFunc('&Utils_idleFxn', 1);
}
else
{
    BIOS.smpEnabled = false;

    /* Add an idle thread 'Utils_idleFxn' that monitors interrupts.*/
    Idle.addFunc('&Utils_idleFxn');
}


var platformMem = java.lang.System.getenv("DDR_MEM");
Program.global.XDC_CFG_VPDMA_DESC_PHYS_ADDR  = Program.cpu.memoryMap['HDVPSS_DESC_MEM'].base;
if (platformMem != "DDR_MEM_1024M")
{
    Program.global.XDC_CFG_VPDMA_DESC_PHYS_ADDR  = Program.cpu.memoryMap['HDVPSS_DESC_MEM'].base - 0x20000000;
}
/* Physical address of VPDMA desc is HDVPSS_DESC_ADDR - 512MB */

/* Memory section address and size */
Program.global.XDC_SR1_FRAME_BUFFER_ADDR = Program.cpu.memoryMap['SR1_FRAME_BUFFER_MEM'].base;
Program.global.XDC_SR1_FRAME_BUFFER_SIZE = Program.cpu.memoryMap['SR1_FRAME_BUFFER_MEM'].len;
Program.global.XDC_SR1_BUFF_ECC_ASIL_ADDR = Program.cpu.memoryMap['SR1_BUFF_ECC_ASIL_MEM'].base;
Program.global.XDC_SR1_BUFF_ECC_ASIL_SIZE = Program.cpu.memoryMap['SR1_BUFF_ECC_ASIL_MEM'].len;
Program.global.XDC_SR1_BUFF_ECC_QM_ADDR = Program.cpu.memoryMap['SR1_BUFF_ECC_QM_MEM'].base;
Program.global.XDC_SR1_BUFF_ECC_QM_SIZE = Program.cpu.memoryMap['SR1_BUFF_ECC_QM_MEM'].len;
Program.global.XDC_SR1_BUFF_NON_ECC_ASIL_ADDR = Program.cpu.memoryMap['SR1_BUFF_NON_ECC_ASIL_MEM'].base;
Program.global.XDC_SR1_BUFF_NON_ECC_ASIL_SIZE = Program.cpu.memoryMap['SR1_BUFF_NON_ECC_ASIL_MEM'].len;

/*
 *  ======== IPU1 CORE0 Processor (primary core) ========
 *  AMMU config need to be done only on one core
 *  This is done in primary core (CORE0) , so do it here
 */
/***********************************************
 *              Ammu Configuraiton             *
 ***********************************************/
var ammu = xdc.loadCapsule("Ammu1_bios.cfg");

ammu.init();

/*
 *  ======== IPC Configuration ========
 */
Program.global.procName = "IPU1-0";
xdc.loadCapsule("src/rtos/bios_app_common/tda3xx/cfg/IPC_common.cfg");

/*
 *  ======== Operating System Configuration ========
 */

/* no rts heap */
Program.heap = 0;
Program.argSize = 100;  /* minimum size */
Program.stack = 0x4000;

/* create a default heap */
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var heapMemParams = new HeapMem.Params();
heapMemParams.size = 0x40000;



var Memory = xdc.useModule('xdc.runtime.Memory');
Memory.defaultHeapInstance = HeapMem.create(heapMemParams);
Memory.defaultHeapSize  = 0x15000;


Program.sectMap[".bss:extMemNonCache:vpdma"]    = "HDVPSS_DESC_MEM";
Program.sectMap[".bss:extMemNonCache:linkStats"] = "LINK_STATS_MEM";

Program.sectMap[".bss:extMemNonCache:remoteLogCoreShm"] = "REMOTE_LOG_MEM";
Program.sectMap[".bss:extMemNonCache:hcfResourceTable"] = "REMOTE_LOG_MEM";
Program.sectMap[".bss:extMemNonCache:ipcShm"] = "SYSTEM_IPC_SHM_MEM";
if (java.lang.System.getenv("OPENVX_INCLUDE") == "yes")
{
    Program.sectMap[".bss:extMemNonCache:tiovxObjDescShm"] = "OPENVX_SHM_MEM";
}

Program.sectMap[".text"]                      = "IPU1_0_CODE_MEM";
Program.sectMap[".const"]                     = "IPU1_0_CODE_MEM";
Program.sectMap[".plt"]                       = "IPU1_0_CODE_MEM";

Program.sectMap[".data"]                      = "IPU1_0_DATA_MEM";
Program.sectMap[".bss"]                       = "IPU1_0_DATA_MEM";
Program.sectMap[".neardata"]                  = "IPU1_0_DATA_MEM";
Program.sectMap[".rodata"]                    = "IPU1_0_DATA_MEM";

Program.sectMap[".bss:taskStackSection"]      = "IPU1_0_DATA_MEM";

Program.sectMap[".bss:heapMemDDR"]            = "SR1_FRAME_BUFFER_MEM";
Program.sectMap[".bss:heapMemDDREccAsil"]     = "SR1_BUFF_ECC_ASIL_MEM";
Program.sectMap[".bss:heapMemDDREccQM"]       = "SR1_BUFF_ECC_QM_MEM";
Program.sectMap[".bss:heapMemDDRNonEccAsil"]  = "SR1_BUFF_NON_ECC_ASIL_MEM";
Program.sectMap[".bss:heapMemOCMC"]           = "OCMC_RAM";

if (platformMem == "DDR_MEM_512M")
{
    Program.sectMap[".bss:NDK_PACKETMEM"]      = "NDK_MEM";
    Program.sectMap[".bss:NDK_MMBUFFER"]       = "NDK_MEM";
}

var DSP1_DATA_MEM = Program.cpu.memoryMap['DSP1_DATA_MEM'];
Program.global.gXdcDsp1DataAddr = DSP1_DATA_MEM.base;
Program.global.gXdcDsp1DataSize = DSP1_DATA_MEM.len;
if (platformMem != "DDR_MEM_128M")
{
    var DSP2_DATA_MEM = Program.cpu.memoryMap['DSP2_DATA_MEM'];
    Program.global.gXdcDsp2DataAddr = DSP2_DATA_MEM.base;
    Program.global.gXdcDsp2DataSize = DSP2_DATA_MEM.len;
}
else
{
    Program.global.gXdcDsp2DataAddr = 0;
    Program.global.gXdcDsp2DataSize = 0;
}

var EVE1_DATA_MEM = Program.cpu.memoryMap['EVE1_DATA_MEM'];
Program.global.gXdcEve1DataAddr = EVE1_DATA_MEM.base;
Program.global.gXdcEve1DataSize = EVE1_DATA_MEM.len;

/* The following value is used by L3FW, so subtract 0x20000000 to get
 * physical address. M4 uses the alias at 0xA0000000.
 */
var LINK_STATS_MEM = Program.cpu.memoryMap['LINK_STATS_MEM'];
Program.global.gXdcLinkStatsAddr = LINK_STATS_MEM.base;
if (platformMem != "DDR_MEM_1024M")
{
    Program.global.gXdcLinkStatsAddr = LINK_STATS_MEM.base - 0x20000000;
}
Program.global.gXdcLinkStatsSize = LINK_STATS_MEM.len;

/* Exception hook function */
var HwiM3       = xdc.useModule('ti.sysbios.family.arm.m3.Hwi');

/* enable print of exception handing info */
HwiM3.enableException = true;
HwiM3.nvicCCR.DIV_0_TRP = 1;
HwiM3.excHookFunc = '&Utils_m4ExceptionHookFxn';
HwiM3.NUM_INTERRUPTS = 86; /* For TDA2x this is 80 */
HwiM3.dispatchTableSize = 86; /* For TDA2x this is 80 */

/* XDC runtime function */
var Error = xdc.useModule("xdc.runtime.Error");
Error.raiseHook = "&Utils_commonErrorRaiseHook";

var InitXbar    = xdc.useModule("ti.sysbios.family.shared.vayu.IntXbar");

/***********************************************
 *          CLOCK Module Configuraion          *
 ***********************************************/
var Clock = xdc.useModule("ti.sysbios.knl.Clock");
Clock.tickMode = Clock.TickMode_PERIODIC;
Clock.tickSource = Clock.TickSource_USER;

/***********************************************
*           Timer Module Configuraion         *
***********************************************/
var Timer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');

Timer.intFreqs[2].hi = 0;
/* system clock runs at 20 MHz */
Timer.intFreqs[2].lo = 20000000;

var timerParams = new Timer.Params();
timerParams.period = 1000;
timerParams.twer.ovf_wup_ena = 1;
timerParams.tiocpCfg.emufree = 1;
timerParams.tsicr.posted = 0;

Timer.create(2, '&mainIPU1_C0TimerTick', timerParams);

var DMTimer = xdc.useModule('ti.sysbios.timers.dmtimer.Timer');
var timerParams2 = new DMTimer.Params();
timerParams2.tsicr.posted = 0;
DMTimer.intFreqs[3].hi = 0;
DMTimer.intFreqs[3].lo = 20000000;
var DMTimestampProvider = xdc.useModule("ti.sysbios.timers.dmtimer.TimestampProvider");
DMTimestampProvider.timerId = 3;
DMTimestampProvider.useClockTimer = false;
var Timestamp = xdc.useModule("xdc.runtime.Timestamp");
Timestamp.SupportProxy = DMTimestampProvider;

if (java.lang.System.getenv("ENABLE_TASK_PROFILE_UTIL") == "yes")
{
    /***********************************************
     * Task Timer utility *
     ***********************************************/
    var Task = xdc.useModule('ti.sysbios.knl.Task');
    /* Define and add one Task Hook Set */
    Task.addHookSet({
        registerFxn: '&Utils_taskTimerRegisterHook',
        createFxn: '&Utils_taskTimerCreateHook',
        readyFxn: '&Utils_taskTimerReadyHook',
        switchFxn: '&Utils_taskTimerSwitchHook',
        exitFxn: '&Utils_taskTimerExitHook',
        deleteFxn: '&Utils_taskTimerDeleteHook',
        });
}

/* allocate timer 2 & 3 to IPU0 */
var TimerSupport = xdc.useModule('ti.sysbios.family.shared.vayu.TimerSupport');
TimerSupport.availMask = 0x000C;

/* In order to check how much percentange of Idle time the CPU is in Low power */
var LocalTimestampProvider = xdc.useModule('ti.sysbios.family.arm.ducati.TimestampProvider');

