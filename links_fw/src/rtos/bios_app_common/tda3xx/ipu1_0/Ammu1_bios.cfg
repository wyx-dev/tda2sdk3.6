
/*******************************************************************************
*  file name: Ammu1.cfg
*  Set IPU1 (core 0 and core 1) AMMU configuration
*
*******************************************************************************/

/******************************************************************************
 *
 * NOTE:
 *
 * Region 0x42000000 to 0x44000000 (32MB) is BitBand region in IPU.
 *
 * Any L3/L4 peripherals mapped to this region must be accsssed via virtual 
 * address on IPU side.
 *
 * On TDA3xx below peripherals fall in this BitBand region
 *   - EVE1 MBOX0/1
 *   - System EDMA
 *
 * Further IPC package by default acceses System mailbox's on IPU side via 
 * virtual address's
 *
 * In AMMU config, one large page can be used to do this virutal to physical 
 * address mapping as shown below,
 *
 *   Virutal Address          Physical Address
 *  0x60000000:0x7FFFFFFF -> 0x40000000:0x5FFFFFFF   (512MB)
 *
 ******************************************************************************
 */ 

function init()
{
    var Program = xdc.useModule('xdc.cfg.Program');
    var Cache = xdc.useModule('ti.sysbios.hal.unicache.Cache');
    Cache.enableCache = true;

    var AMMU = xdc.useModule('ti.sysbios.hal.ammu.AMMU');
    AMMU.configureAmmu = false;

    /*********************** Medium Pages *************************/

    /*********************** Small Pages *************************/
 

    /*********************** Large Pages *************************/
    var entry = AMMU.largePages[0];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x40000000;
    entry.translatedAddress = 0x40000000;
    entry.size = AMMU.Large_512M;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_NON_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;

    /* map program code/data memory into ammu (cacheable) */
    var entry = AMMU.largePages[1];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x80000000;
    entry.translatedAddress = 0x80000000;
    entry.size = AMMU.Large_512M;
    entry.L1_cacheable = AMMU.CachePolicy_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_POSTED;
    entry.L1_allocate = AMMU.AllocatePolicy_ALLOCATE;
    entry.L1_writePolicy = AMMU.WritePolicy_WRITE_BACK;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;

    /* map SR_0 data memory into ammu (non-cacheable) */
    var entry = AMMU.largePages[2];
    var platformMem = java.lang.System.getenv("DDR_MEM");
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    if (platformMem == "DDR_MEM_1024M")
    {
        entry.logicalAddress = 0xA0000000;
        entry.translatedAddress = 0xA0000000;
    }
    else
    {
        entry.logicalAddress = 0xA0000000;
        entry.translatedAddress = 0x80000000;
    }
    entry.size = AMMU.Large_512M;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;

    var entry = AMMU.largePages[3];
    entry.pageEnabled = AMMU.Enable_YES;
    entry.translationEnabled = AMMU.Enable_YES;
    entry.logicalAddress = 0x60000000;
    entry.translatedAddress = 0x40000000;
    entry.size = AMMU.Large_512M;
    entry.L1_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L1_posted = AMMU.PostedPolicy_NON_POSTED;
    entry.L2_cacheable = AMMU.CachePolicy_NON_CACHEABLE;
    entry.L2_posted = AMMU.PostedPolicy_NON_POSTED;

}